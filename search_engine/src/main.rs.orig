extern crate search_engine;
extern crate stemmer;

use std::collections::HashMap;
use stemmer::Stemmer;

use search_engine::index::inverted_index::InvertedIndex;

<<<<<<< HEAD
use std::io::{stdin,stdout,Write};
||||||| merged common ancestors

use std::io::{stdin,stdout,Write};
=======

use std::io::{stdin, stdout, Write};

>>>>>>> 42bb825305c753e2fca7cd86b3ba618428e1b5ad
fn main() {

    let mut stemmer = Stemmer::new("english").unwrap();
    println!("{}", stemmer.stem("consolingly"));

    let mut inverted_index = InvertedIndex { mIndex: HashMap::new() };

    loop {
        let mut term = String::new();
        print!("Please enter some text: ");
        let _ = stdout().flush();
        stdin().read_line(&mut term).expect(
            "Did not enter a correct string",
        );
        if let Some('\n') = term.chars().next_back() {
            term.pop();
        }
        if let Some('\r') = term.chars().next_back() {
            term.pop();
        }

        let mut docID = String::new();
        print!("Enter doc ID: ");

        let _ = stdout().flush();
        stdin().read_line(&mut docID).expect(
            "Did not enter a correct string",
        );
        if let Some('\n') = docID.chars().next_back() {
            docID.pop();
        }
        if let Some('\r') = docID.chars().next_back() {
            docID.pop();
        }
        let my_string = docID.to_string();

        let docID_int = my_string.parse::<i32>().unwrap();

        inverted_index.addTerm(&term, docID_int);

        println!("There are {} in index", inverted_index.getTermCount());

        let postings = inverted_index.getPostings(&term);

        print!("{} : ", term);

        for p in postings {
            print!("{} ", p);
        }
        println!("\n");
    }
}
